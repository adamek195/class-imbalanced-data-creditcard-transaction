# -*- coding: utf-8 -*-
"""creditcard_randomforest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NzEQW-qvAVeGi_Xs0gj4bO5H7oNUltog

# Import libraries
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix

"""# Credit card data"""

from google.colab import drive
drive.mount('/content/gdrive')

PATH = '/content/gdrive/MyDrive/Creditcard_data/creditcard.csv';

dataframe = pd.read_csv(PATH)
dataframe.head(5)

dataframe.shape

"""# Class-imbalance - fraud transactions"""

dataframe['Class'].value_counts()

"""# Random forest classifier"""

x = dataframe.drop(['Class'],axis=1)
y = dataframe.Class

x_train, x_test, y_train, y_test = train_test_split(x,y,random_state=331, test_size=0.33)

print("train rows: {}, test rows: {}".format(x_train.shape[0], x_test.shape[0]))  # rows

rf = RandomForestClassifier()
rf.fit(x_train,y_train)

y_pred = rf.predict(x_test)

rf.score(x_test, y_test)

confusion_matrix(y_test, y_pred, labels=[1,0])

tp, fn, fp, tn = confusion_matrix(y_test, y_pred, labels=[1,0]).ravel()
(tp, fn, fp, tn)

sensitivity = tp/(tp+fn)
specificity = tn/(fp+tn)

print("sensitivity = {:.4f}, specificity = {:.4f}".format(sensitivity, specificity))

"""# Changing parameters of decision tree

## Max depth = 2
"""

rf = RandomForestClassifier(max_depth = 2)
rf.fit(x_train,y_train)

y_pred = rf.predict(x_test)

rf.score(x_test, y_test)

confusion_matrix(y_test, y_pred, labels=[1,0])

tp, fn, fp, tn = confusion_matrix(y_test, y_pred, labels=[1,0]).ravel()
(tp, fn, fp, tn)

sensitivity = tp/(tp+fn)
specificity = tn/(fp+tn)

print("sensitivity = {:.4f}, specificity = {:.4f}".format(sensitivity, specificity))

"""## Max depth = 5"""

rf = RandomForestClassifier(max_depth = 5)
rf.fit(x_train,y_train)

y_pred = rf.predict(x_test)

rf.score(x_test, y_test)

confusion_matrix(y_test, y_pred, labels=[1,0])

tp, fn, fp, tn = confusion_matrix(y_test, y_pred, labels=[1,0]).ravel()
(tp, fn, fp, tn)

sensitivity = tp/(tp+fn)
specificity = tn/(fp+tn)

print("sensitivity = {:.4f}, specificity = {:.4f}".format(sensitivity, specificity))

"""## Max depth = 10"""

rf = RandomForestClassifier(max_depth = 10)
rf.fit(x_train,y_train)

y_pred = rf.predict(x_test)

rf.score(x_test, y_test)

confusion_matrix(y_test, y_pred, labels=[1,0])

tp, fn, fp, tn = confusion_matrix(y_test, y_pred, labels=[1,0]).ravel()
(tp, fn, fp, tn)

sensitivity = tp/(tp+fn)
specificity = tn/(fp+tn)

print("sensitivity = {:.4f}, specificity = {:.4f}".format(sensitivity, specificity))

"""## Max depth = 15"""

rf = RandomForestClassifier(max_depth = 15)
rf.fit(x_train,y_train)

y_pred = rf.predict(x_test)

rf.score(x_test, y_test)

confusion_matrix(y_test, y_pred, labels=[1,0])

tp, fn, fp, tn = confusion_matrix(y_test, y_pred, labels=[1,0]).ravel()
(tp, fn, fp, tn)

sensitivity = tp/(tp+fn)
specificity = tn/(fp+tn)

print("sensitivity = {:.4f}, specificity = {:.4f}".format(sensitivity, specificity))

"""## Max depth = 26

"""

rf = RandomForestClassifier(max_depth = 26)
rf.fit(x_train,y_train)

y_pred = rf.predict(x_test)

rf.score(x_test, y_test)

confusion_matrix(y_test, y_pred, labels=[1,0])

tp, fn, fp, tn = confusion_matrix(y_test, y_pred, labels=[1,0]).ravel()
(tp, fn, fp, tn)

sensitivity = tp/(tp+fn)
specificity = tn/(fp+tn)

print("sensitivity = {:.4f}, specificity = {:.4f}".format(sensitivity, specificity))